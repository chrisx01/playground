<apex:page controller="StarbucksController" sidebar="false" >

<apex:styleSheet value="http://yui.yahooapis.com/2.9.0/build/assets/skins/sam/skin.css" />
 
<apex:includeScript value="http://yui.yahooapis.com/2.9.0/build/yahoo-dom-event/yahoo-dom-event.js" />
<apex:includeScript value="http://yui.yahooapis.com/2.9.0/build/container/container-min.js" />
<apex:includeScript value="http://yui.yahooapis.com/2.9.0/build/animation/animation-min.js" />
<apex:includeScript value="http://yui.yahooapis.com/2.9.0/build/dragdrop/dragdrop-min.js" />
	<script type="text/javascript" charset="utf-8" src="http://cdn.sencha.io/ext-4.0.7-gpl/ext-all.js"></script>
    <link rel="stylesheet" type="text/css" href="http://cdn.sencha.io/ext-4.0.7-gpl/resources/css/ext-all.css" />
 <script>
var overLay;
function showInput(e) {

	overLay = new YAHOO.widget.Overlay(
			"{!$Component.panelInput}",
			{ 
			xy:[525,e.pageY],
			visible:false,
			width:"450px",
			draggable:true,
			zIndex:1000, 
			effect:{
					 effect:YAHOO.widget.ContainerEffect.FADE,
				 	 duration:0.25
				  }
				}
	 		);
	 overLay.render("{!$Component.form}");
	 overLay.show();
	 
}

 
function hideInput() {
if (overLay != null) {
	overLay.hide();
	overLay = null;
	}	 
}

function showGrid() {

	grid.show();
}
	
	
function hideGrid() {
if (grid != null) {
	grid.hide();
	grid = null;
	}	 
}
</script>
<script>
    
    // Create a namespace for our custom functions
    YAHOO.namespace("force.com");

    // Function called when we want to show the dialog
    YAHOO.force.com.showMe = function() {
        document.getElementById("myPanel").style.display = "block";
        YAHOO.force.com.myDialog.show();
    }
   
    // Function called when we want to hide the dialog
    YAHOO.force.com.hideMe = function() {
        YAHOO.force.com.myDialog.hide();
    }

    // Function called when the DOM is ready to create the dialog,
    // render the dialog into the document body, add our dialog skin
    // css to the body tag, and wire up the buttons on our dialog    
    YAHOO.force.com.init = function() {
        document.body.className = document.body.className + " yui-skin-sam";
        
        YAHOO.force.com.myDialog = new YAHOO.widget.Panel(
            "myPanel",  // The id of our dialog container
            { 
                    width           :   300,    // You can play with this until it's right
                    visible         :   false,  // Should be invisible when rendered
                    draggable       :   true,   // Make the dialog draggable
                    close           :   false,  // Don't include a close title button
                    modal           :   true,   // Make it modal
                    fixedCenter     :   true,   // Keep centered if window is scrolled
                    zindex          :   40,     // Make sure it's on top of everything
                    
                    // This line adds the appear/vanish fade effect
                    effect          :   {
                                          effect:YAHOO.widget.ContainerEffect.FADE,
                                          duration:0.35
                                        } 
            }
         );
        
        // Render the dialog to the document.body level of the DOM
        YAHOO.force.com.myDialog.render(document.body);
    }
    
    // Add the init method to the window.load event
    YAHOO.util.Event.addListener(window, "load", YAHOO.force.com.init);

</script>

<script>

showMe = (function(event, Id) {


	
	Ext.onReady(function(){
   
 Ext.Msg.alert('Status',Id);
     StarbucksController.getStoreJson(Id,function(result, er){ //This method is used to call our controller method
						                var res = Ext.decode(result);
						                store.loadData(res.Records);
	            					}, {escape:false});
	            				//	});
   		
   		
   		Ext.define('StoreModel', { //Defining a model, which is like an object
	        extend	: 'Ext.data.Model',
	        fields	: [
			            {name: 'Id', type: 'string'},
			            {name: 'Name', type: 'string'},
			            {name: 'StoreName', type: 'string'}
	    			  ]
	    });
	    
		var store = Ext.create('Ext.data.Store', { //Create a store, which is like collection of records with sorting and grouping capability
	                        model 		: 'StoreModel', //Associate your store with Model
	                        proxy 		: {
				                            type 	: 'memory',
				                            reader	: {
			                                	type : 'json',
				                          	}
	                       				  }
	                    });
 
 
	// Create a variable to hold our EXT Form Panel. 
	// Assign various config options as seen.	 
    var editpanel = new Ext.Panel({ 
        labelWidth:80,
        url : 'javascript:save()',
        frame:true, 
        title:'Edit ', 
        defaults:{xtype:'textfield'},
		store		: store,	
        items:[{
        	fieldLabel:'ID', // we can create a component  
            name:'ID',  
            id:'id'  ,
            value :'Name'
        	}, {
	        	fieldLabel : 'Name',
	        	name:'Name',  
	            id:'Name',
	            value :store.Name
	             },
             {
	            fieldLabel : 'StoreName',
	        	 name:'StoreName',  
	             id:'StoreName',
	             value :'Name'
		     }],
            buttons:[{ 
                text:'Save',
                formBind: true,	 
                // Function that fires when user clicks the button 
                handler:function(){ 
                    editpanel.getForm().submit({ 
                        method:'javascript:save()', 
                        waitTitle:'Connecting', 
                        waitMsg:'saving data...',
                        
                        success:function(){ 
                        	Ext.Msg.alert('Status', 'Save Successful!', function(btn, text){
				   if (btn == 'ok'){
		                        var redirect = '{!$CurrentPage.URL}'; 
		                        window.location = redirect;
                                   }
			        });
                        },
 
                        failure:function(form, action){ 
                                                            
                                Ext.Msg.alert('Save Failed!',action); 
                                                      
                           
                        }
					} )
                 } 
            }]
           });
             
	// This just creates a window to wrap the login form. 
	// The login object is passed to the items collection.       
    var win = new Ext.Window({
        layout:'fit',
        width:300,
        height:150,
        closable: false,
        resizable: false,
        plain: true,
        border: false,
        items: [editpanel]
	});
	win.show();
});
	
	});
</script>

  <apex:form >
 <apex:actionFunction name="save" action="{!saveSingle}" rerender="employees" />
 <apex:pageBlock title="Employees" id="employees">

        <apex:pageBlockTable value="{!employees}" var="item">

            <apex:column value="{!item.name}"/> 
 <apex:column value="{!item.description__c}"/> 
 <apex:column value="{!item.Store__c}"/> 
  <apex:column >

  <apex:commandButton onclick="showMe(event,'{!item.Id}');return false;" value="edit" id="editButton"/></apex:column>
        </apex:pageBlockTable> 

    </apex:pageBlock> 
</apex:form>
<!-- This is the page that we want to display to the user -->
<apex:outputPanel >
  <apex:pageBlock title="Basic Modal Dialog" id="none">
    <apex:pageBlockButtons >
        <input type="button" class="btn" 
                    onclick="YAHOO.force.com.showMe();" 
                    value="Popup Demo" />
    </apex:pageBlockButtons>

  </apex:pageBlock>
</apex:outputPanel>

<!-- This is the content of the modal dialog -->
<div id="myPanel" style="display: none" >
  <div class="hd">
    <apex:outputText value="Cool Modal Dialog" />
  </div> 
  <div class="bd">
      <apex:form id="form2">
        <apex:pageBlock >
      
        	<apex:pageBlockTable value="{!stores}" var="store">
		<apex:column >
	 <apex:inputField id="fName" value="{!store.data.StoreName__c}" />
		</apex:column>
	
            
         
	</apex:pageBlockTable>
        
          
        </apex:pageBlock>
        <div style="text-align: right;" >
          <apex:commandButton value="Select" 
              oncomplete="YAHOO.force.com.hideMe();" />
          <apex:commandButton value="Cancel" immediate="true" 
              oncomplete="YAHOO.force.com.hideMe();"/>
        </div>
      </apex:form>
      </div>
  <div class="ft" style="font-size: 10px;">
    <apex:outputPanel layout="block">
      The dialog in this demo is using a "hidden" DIV containing and contains 
      its own Visualforce Form. The information entered into the inputText 
      component is bound to data in the Apex Controller.
    </apex:outputPanel>
  </div>
</div>
<apex:form id="form">

<apex:image id="theImage" height="45px" value="{!$Resource.logo}">
 <apex:actionSupport event="onmouseover"  action="{!refreshStore}"  oncomplete="showInput(event);" onsubmit="hideInput();" rerender="panelInput" />
 </apex:image>
 </apex:form>
 <apex:outputPanel id="panelInput" style="visibility:hidden;" >
<c:panelInput item="select"/>
</apex:outputPanel>

<a href="#" id="extGrid">Click Here</a>
 <apex:outputPanel id="gridSpace" style="avisibility:hidden;" >
<c:extGrid />
</apex:outputPanel>
</apex:page>